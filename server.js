import express from "express";
import dotenv from "dotenv";
import fs from "fs/promises";
import cors from "cors";
import helmet from "helmet";
import rateLimit from "express-rate-limit";
import NodeCache from "node-cache";
import winston from "winston";
import { readFileSync } from "fs";
import { fileURLToPath } from "url";
import { dirname } from "path";
import path from "path";
import OpenAI from "openai";

dotenv.config();

const app = express();
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Trust proxy –ü–ï–†–í–´–ú! (–¥–ª—è Render.com)
app.set('trust proxy', 1);

// Logging
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'error.log' })
  ]
});

// Helmet —Å –û–¢–ö–õ–Æ–ß–ï–ù–ù–´–ú CSP (—Ç–æ–ª—å–∫–æ security headers)
app.use(helmet({
  contentSecurityPolicy: false,  // ‚Üê –ü–û–õ–ù–û–ï –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï CSP
  crossOriginEmbedderPolicy: false,
  crossOriginOpenerPolicy: false,
  crossOriginResourcePolicy: false,
  referrerPolicy: { policy: 'same-origin' }
}));

app.use(express.json({ limit: '10kb' }));
app.use(express.urlencoded({ extended: true }));

// Rate limit –¢–û–õ–¨–ö–û –Ω–∞ API endpoints
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å IP
  keyGenerator: (req) => req.ip,
  standardHeaders: true,
  legacyHeaders: false,
  skipFailedRequests: true,
  message: { error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.' }
});
app.use('/api/', limiter);

// CORS –¥–ª—è –≤—Å–µ—Ö origins (Render + Tilda + localhost)
app.use(cors({
  origin: [
    '*', 
    'https://entech-chat.onrender.com', 
    'https://*.tilda.ws', 
    'https://tilda.cc', 
    'http://localhost:3000'
  ],
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true
}));

// Static files (index.html, CSS, etc.)
app.use(express.static(__dirname));

// Custom middleware: –õ–æ–≥–∏ + –ü–û–õ–ù–´–ô CSP OVERRIDE
app.use((req, res, next) => {
  // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
  logger.info(`${req.method} ${req.url} from ${req.ip} - User-Agent: ${req.get('User-Agent')}`);
  
  // –ü–û–õ–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï CSP HEADERS (Render –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏)
  res.removeHeader('Content-Security-Policy');
  res.removeHeader('content-security-policy');
  res.removeHeader('X-Content-Security-Policy');
  
  // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –†–ê–ó–†–ï–®–ò–¢–ï–õ–¨–ù–´–ô CSP (–¥–ª—è inline JS/CSS)
  res.setHeader('Content-Security-Policy', 
    "default-src * 'unsafe-inline' 'unsafe-eval'; " +
    "script-src * 'unsafe-inline' 'unsafe-eval' blob: data:; " +
    "style-src * 'unsafe-inline'; " +
    "connect-src *; " +
    "img-src * data: blob:; " +
    "font-src * data:; " +
    "frame-src *; " +
    "object-src *; " +
    "media-src *; " +
    "worker-src * blob:;"
  );
  
  // –î—Ä—É–≥–∏–µ security headers
  res.setHeader('X-Frame-Options', 'SAMEORIGIN');
  res.setHeader('X-XSS-Protection', '1; mode=block');
  res.setHeader('X-Content-Type-Options', 'nosniff');
  
  next();
});

// Load catalog & scenario
let catalog = [];
let scenario = {};
const cache = new NodeCache({ stdTTL: 300 }); // 5 –º–∏–Ω—É—Ç –∫—ç—à

try {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
  if (fs && readFileSync) {
    catalog = JSON.parse(readFileSync("catalog.json", "utf8"));
    scenario = JSON.parse(readFileSync("scenario.json", "utf8"));
    logger.info(`Loaded: ${catalog.length} items, scenario OK`);
  }
} catch (err) {
  logger.error(`Load error: ${err.message}`);
  // Fallback: –ø—É—Å—Ç–æ–π –∫–∞—Ç–∞–ª–æ–≥
  catalog = [];
  scenario = {};
}

// OpenAI v4 ‚Äî –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
let openai;
try {
  openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
  });
  logger.info("OpenAI client initialized");
} catch (err) {
  logger.error(`OpenAI init error: ${err.message}`);
  openai = null;
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
function findProducts(query) {
  const cacheKey = `search:${query.toLowerCase()}`;
  let products = cache.get(cacheKey);
  
  if (products !== undefined) {
    return products;
  }

  const q = query.toLowerCase();
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
  const keywords = {
    power: q.match(/(\d{1,3})\s*(–í—Ç|W|–≤–∞—Ç—Ç)/)?.[1] || null,
    ip: q.match(/ip(\d{2})/)?.[1] || null,
    category: q.includes('—Å–∫–ª–∞–¥') || q.includes('—Ü–µ—Ö') || q.includes('–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ') || q.includes('–∑–∞–≤–æ–¥') ? '–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ' :
              q.includes('—É–ª–∏—Ü–∞') || q.includes('–¥–≤–æ—Ä') || q.includes('–ø–∞—Ä–∫–æ–≤–∫–∞') || q.includes('–≤–Ω–µ—à–Ω–µ–µ') ? '—É–ª–∏—á–Ω—ã–µ' :
              q.includes('–æ—Ñ–∏—Å') || q.includes('–∫–∞–±–∏–Ω–µ—Ç') || q.includes('–∫–æ–Ω—Ç–æ—Ä–∞') ? '–æ—Ñ–∏—Å–Ω—ã–µ' :
              q.includes('–º–∞–≥–∞–∑–∏–Ω') || q.includes('—Ç–æ—Ä–≥–æ–≤—ã–π') || q.includes('retail') ? '—Ç–æ—Ä–≥–æ–≤—ã–µ' : null,
    area: q.match(/(\d{1,3})\s*(–º¬≤|–∫–≤\.–º|–ø–ª–æ—â–∞–¥—å)/)?.[1] || null
  };

  // –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É
  products = catalog
    .map(item => {
      let score = 0;
      const itemLower = {
        model: item.model?.toLowerCase() || '',
        name: item.name?.toLowerCase() || '',
        category: item.category?.toLowerCase() || '',
        raw: (item.raw || item.description || '').toLowerCase()
      };
      
      // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (+5)
      if (itemLower.model.includes(q)) score += 5;
      
      // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (+3)
      if (itemLower.name.includes(q)) score += 3;
      
      // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (+4)
      if (keywords.category && itemLower.category.includes(keywords.category)) score += 4;
      
      // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –º–æ—â–Ω–æ—Å—Ç–∏ (+3 –µ—Å–ª–∏ –±–ª–∏–∑–∫–æ, +2 –µ—Å–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ)
      if (keywords.power && item.power_w) {
        const targetPower = parseInt(keywords.power);
        const powerDiff = Math.abs(item.power_w - targetPower);
        if (powerDiff <= 10) score += 3;
        else if (powerDiff <= 30) score += 2;
      }
      
      // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ IP (+4)
      if (keywords.ip && item.ip_rating?.toLowerCase() === `ip${keywords.ip}`) score += 4;
      
      // –§–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é (+2)
      if (itemLower.raw.includes(q)) score += 2;
      
      // –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      if (q.includes('–æ—Ñ–∏—Å')) score += 1;
      if (q.includes('—É–ª–∏—Ü–∞')) score += 1;
      if (q.includes('—Å–∫–ª–∞–¥')) score += 1;
      
      return { ...item, score, relevance: score > 0 ? 'high' : 'low' };
    })
    .filter(item => item.score > 0)
    .sort((a, b) => b.score - a.score)
    .slice(0, 3); // –¢–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

  cache.set(cacheKey, products);
  return products;
}

// API: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ö–ü
app.post("/api/quote", async (req, res) => {
  try {
    const { name, contact, products, message } = req.body;
    
    if (!contact) {
      return res.status(400).json({ 
        error: "–ö–æ–Ω—Ç–∞–∫—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞—è–≤–∫–∏" 
      });
    }

    const entry = { 
      timestamp: new Date().toISOString(),
      name: name || '–ù–µ —É–∫–∞–∑–∞–Ω',
      contact,
      products: products || [],
      message: message || '',
      source: req.get('User-Agent') || 'Unknown'
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª (Render free tier –º–æ–∂–µ—Ç –Ω–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å ‚Äî fallback –≤ console)
    try {
      let quotes = JSON.parse(await fs.readFile("quotes.json", "utf8").catch(() => "[]"));
      quotes.push(entry);
      await fs.writeFile("quotes.json", JSON.stringify(quotes, null, 2));
      logger.info(`Lead saved to file: ${contact}`);
    } catch (fileErr) {
      // Fallback: –ª–æ–≥–∏—Ä—É–µ–º –≤ Winston
      logger.info('NEW LEAD:', JSON.stringify(entry, null, 2));
      logger.error(`File write error (Render limitation?): ${fileErr.message}`);
    }

    logger.info(`Lead captured: ${contact} (${products?.length || 0} products)`);
    res.json({ 
      ok: true, 
      message: "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.",
      leadId: Date.now().toString()
    });
  } catch (err) {
    logger.error(`Quote API error: ${err.message}`);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏" });
  }
});

// API: AI —á–∞—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
app.post("/api/chat", async (req, res) => {
  try {
    const { message } = req.body;
    
    if (!message || typeof message !== 'string' || message.trim().length < 1) {
      return res.status(400).json({ 
        error: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" 
      });
    }

    if (!openai) {
      return res.status(503).json({ 
        error: "AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" 
      });
    }

    logger.info(`Chat request: "${message.slice(0, 50)}..." from ${req.ip}`);

    // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    const products = findProducts(message);
    const productCount = products.length;
    
    const productText = productCount > 0 ? 
      `\n\n**üì¶ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ò–ó –ö–ê–¢–ê–õ–û–ì–ê (${productCount} —à—Ç.):**\n` +
      products.map((p, i) => 
        `${i+1}. **${p.model || '–ú–æ–¥–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}** ` +
        `(${p.power_w || '?'}–í—Ç${p.lumens ? ', ' + p.lumens + '–ª–º' : ''}, ` +
        `${p.ip_rating || 'IP –Ω–µ —É–∫–∞–∑–∞–Ω'}, ${p.category || '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'})`
      ).join('\n') : '';

    // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Entech AI
    const sysPrompt = `–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Entech –ø–æ —Å–≤–µ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–µ. 
–¢–≤–æ—è —Ü–µ–ª—å: –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.

**–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê:**
1. **–í–°–ï–ì–î–ê** –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
2. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ **–æ—Ñ–∏—Å** ‚Üí IP20, 30-60–í—Ç, –æ—Ñ–∏—Å–Ω—ã–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏
3. –ï—Å–ª–∏ **—Å–∫–ª–∞–¥/—Ü–µ—Ö** ‚Üí IP65, 100-300–í—Ç, –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ  
4. –ï—Å–ª–∏ **—É–ª–∏—Ü–∞/–¥–≤–æ—Ä** ‚Üí IP65+, 50-150–í—Ç, —É–ª–∏—á–Ω—ã–µ —Ñ–æ–Ω–∞—Ä–∏
5. **–ù–ï –Ω–∞–∑—ã–≤–∞–π —Ü–µ–Ω—ã** ‚Äî "–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–æ–¥ –≤–∞—à –ø—Ä–æ–µ–∫—Ç"
6. **–í–°–ï–ì–î–ê –∑–∞–∫–∞–Ω—á–∏–≤–∞–π CTA**: "–•–æ—Ç–∏—Ç–µ –ö–ü –≤ PDF —Å —Ä–∞—Å—á–µ—Ç–æ–º –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏? –£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω/email"

**–ù–ê–ô–î–ï–ù–ù–´–ï –¢–û–í–ê–†–´:**
${productText || '–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø–ª–æ—â–∞–¥—å, —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è, IP, –º–æ—â–Ω–æ—Å—Ç—å).'}

**–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:**
- **–ö–æ—Ä–æ—Ç–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ** (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- **–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** (2-3 –º–æ–¥–µ–ª–∏ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏)
- **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Entech** (–≥–∞—Ä–∞–Ω—Ç–∏—è 5 –ª–µ—Ç, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –†–§, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç)
- **CTA** —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é

**–ó–ê–ü–†–û–° –ö–õ–ò–ï–ù–¢–ê:** ${message}

–û—Ç–≤–µ—á–∞–π **–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ**. –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã. –ó–∞–∫—Ä—ã–≤–∞–π –Ω–∞ –∑–∞—è–≤–∫—É.`;

    // OpenAI v4 –≤—ã–∑–æ–≤
    const completion = await openai.chat.completions.create({
      model: process.env.OPENAI_MODEL || "gpt-4o-mini",
      messages: [
        { 
          role: "system", 
          content: sysPrompt 
        },
        { 
          role: "user", 
          content: message.trim() 
        }
      ],
      temperature: 0.3,
      max_tokens: 500,
      top_p: 0.9
    });

    const assistantResponse = completion.choices[0].message.content;

    logger.info(`AI response generated (${completion.usage?.total_tokens || 'N/A'} tokens)`);
    
    res.json({ 
      assistant: assistantResponse.trim(),
      products,
      tokens: completion.usage || null
    });

  } catch (err) {
    logger.error(`Chat API error: ${err.message}`);
    
    // Graceful error handling
    if (err.status === 401) {
      res.status(503).json({ error: "AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á)" });
    } else if (err.status === 429) {
      res.status(429).json({ error: "AI –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É." });
    } else {
      res.status(500).json({ 
        error: "–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å." 
      });
    }
  }
});

// Root route: –æ—Ç–¥–∞—ë–º index.html
app.get('/', (req, res) => {
  const indexPath = path.join(__dirname, 'index.html');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
  try {
    if (fs && fs.accessSync) {
      fs.accessSync(indexPath);
      res.sendFile(indexPath);
    } else {
      // Fallback: –ø—Ä–æ—Å—Ç–æ–π HTML –µ—Å–ª–∏ index.html –Ω–µ—Ç
      res.send(`
        <!DOCTYPE html>
        <html><head><title>Entech AI</title></head>
        <body style="font-family: Arial; text-align: center; padding: 50px;">
          <h1>ü§ñ Entech AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç</h1>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞...</p>
          <script>
            setTimeout(() => {
              document.body.innerHTML += '<p><a href="/index.html">–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç</a></p>';
            }, 2000);
          </script>
        </body></html>
      `);
    }
  } catch (err) {
    logger.error(`Index.html not found: ${err.message}`);
    res.status(404).send('Chat interface not found. Contact administrator.');
  }
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    catalogSize: catalog.length,
    openai: !!openai,
    uptime: process.uptime()
  });
});

// 404 handler –¥–ª—è API
app.use('/api/*', (req, res) => {
  res.status(404).json({ error: 'API endpoint not found' });
});

// Global 404 handler
app.use((req, res) => {
  logger.warn(`404: ${req.method} ${req.url} from ${req.ip}`);
  res.status(404).json({ error: 'Page not found' });
});

// Global error handler
app.use((err, req, res, next) => {
  logger.error(`Global error: ${err.message}`, { stack: err.stack });
  res.status(500).json({ error: 'Internal server error' });
});

const PORT = process.env.PORT || 3000;

app.listen(PORT, '0.0.0.0', () => {
  logger.info(`üöÄ Entech AI Chat Server started on port ${PORT}`);
  logger.info(`üì± Available at: http://localhost:${PORT}`);
  logger.info(`üì¶ Catalog: ${catalog.length} items loaded`);
  logger.info(`ü§ñ OpenAI: ${openai ? 'Ready' : 'Not initialized'}`);
});